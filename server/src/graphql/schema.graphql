# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User
  getUserById (userId: Int!) : User
  getPotentialMatches: [UserInfo]
  getMatches: [UserInfo]
  getUserInfoById (userId: Int!) : UserInfo
}

type Mutation {
  changeUserInfo (input: UserInput!) : Boolean!
  swipeLeft(userId: Int!): Boolean!
  swipeRight(userId: Int!): Boolean!
}

type User {
  id: Int!
  userType: UserType!
  email: String!
  password: String!
}

enum UserType { ADMIN, USER }

input UserInput {
  dogName: String
  dogAge: Int
  dogBreed: String
  bio: String
  contact: String
  facebook: String
  linkedin: String
  location: String
  image: String
}

type UserInfo {
  user: User
  dogName: String
  dogAge: Int
  dogBreed: String
  bio: String
  contact: String
  facebook: String
  linkedin: String
  location: String
  imageURL: String
}